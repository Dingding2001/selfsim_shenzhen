to initialization
  read-numbers
  initialize-frequency
  initialize-education
  find-hhder
  initialize-relationship
  initialize-residence
  initialize-work-study-location
end

to read-numbers
  ;读迁入率和迁出率
  file-close-all ; close all open files
  file-open "Input data/Settings/predict.csv"
  set Nbirth []
  set Ndeath []
  set Nimm []
  set Nemi []
  set Nmarr []
  set Ndivo []
  set MeanIncome []
  while [ not file-at-end? ] 
  [
    let data csv:from-row file-read-line
    set Nbirth lput item 1 data Nbirth
    set Ndeath lput item 2 data Ndeath
    set Nimm lput item 3 data Nimm
    set Nemi lput item 4 data Nemi
    set Nmarr lput item 5 data Nmarr
    set Ndivo lput item 6 data Ndivo
    set MeanIncome lput item 7 data MeanIncome
  ]
  set Nbirth remove-item 0 Nbirth
  set Ndeath remove-item 0 Ndeath
  set Nmarr remove-item 0 Nmarr
  set Ndivo remove-item 0 Ndivo
  set Nemi remove-item 0 Nemi
  set Nimm remove-item 0 Nimm
  set MeanIncome remove-item 0 MeanIncome
  file-close
  
  ;读daily plan 相关数据
  set WeekdayShoppingLoc []
  set WeekendShoppingLoc []
  set WeekdayLeisureLoc []
  set WeekendLeisureLoc []
  
  file-close-all ; close all open files
  file-open "Input data/Settings/DailyPlanLoc.csv"
  while [not file-at-end?]
  [
    let data csv:from-row file-read-line
    set weekdayshoppingloc lput item 1 data weekdayshoppingloc
    set weekendshoppingloc lput item 2 data weekendshoppingloc
    set weekdayleisureloc lput item 3 data weekdayleisureloc
    set weekendleisureloc lput item 4 data weekendleisureloc
  ]
  set weekdayshoppingloc remove-item 0 weekdayshoppingloc
  set weekendshoppingloc remove-item 0 weekendshoppingloc
  set WeekdayLeisureLoc remove-item 0 WeekdayLeisureLoc
  set WeekendLeisureLoc remove-item 0 WeekendLeisureLoc
  file-close
  
  
  set WeekdayShoppingFre []
  set WeekendShoppingFre []
  set WeekdayLeisureFre []
  set WeekendLeisureFre []
  file-close-all ; close all open files
  file-open "Input data/Settings/DailyPlanFre.csv"
  while [not file-at-end?]
  [
    let data csv:from-row file-read-line
    set weekdayshoppingfre lput item 1 data weekdayshoppingfre
    set weekendshoppingfre lput item 2 data weekendshoppingfre
    set weekdayleisurefre lput item 3 data weekdayleisurefre
    set weekendleisurefre lput item 4 data weekendleisurefre
  ]
  set weekdayshoppingfre remove-item 0 weekdayshoppingfre
  set weekendshoppingfre remove-item 0 weekendshoppingfre
  set WeekdayLeisurefre remove-item 0 WeekdayLeisurefre
  set WeekendLeisurefre remove-item 0 WeekendLeisurefre
  file-close
  
  ;读work location choice相关数据
  set WorkDistance []
  set WorkDistanceProb []
  file-close-all ; close all open files
  file-open "Input data/Settings/WorkDistance.csv"
  while [not file-at-end?]
  [
    let data csv:from-row file-read-line
    set WorkDistance lput item 0 data WorkDistance
    set WorkDistanceProb lput item 1 data WorkDistanceProb
  ]
  set WorkDistance remove-item 0 WorkDistance
  set WorkDistanceProb remove-item 0 WorkDistanceProb
  file-close
  ask people
  [
    py:set "WorkDistance" WorkDistance
    py:set "WorkDistanceProb" WorkDistanceProb
    (py:run
      "import random"
      "result = random.choices (WorkDistance, WorkDistanceProb)"
    )
    set distance-max item 0 py:runresult "result"
  ]
  
  ;读Social network相关数据
  let friendid []
  let maxfriend []
  let minfriend []
  let friendprob []
  file-close-all ; close all open files
  file-open "Input data/Settings/SocioNetDistribution.csv"
  while [not file-at-end?]
  [
    let data csv:from-row file-read-line
    set friendid lput item 0 data friendid
    set maxfriend lput item 1 data maxfriend
    set minfriend lput item 2 data minfriend
    set friendprob lput item 3 data friendprob
  ]
  set friendid remove-item 0 friendid 
  set maxfriend remove-item 0 maxfriend
  set minfriend remove-item 0 minfriend
  set friendprob remove-item 0 friendprob
  ask people
  [
    py:set "friendid" friendid
    py:set "friendprob" friendprob
    (py:run
      "import random"
      "result = random.choices (friendid, friendprob)"
    )
    let friend-id item 0 py:runresult "result"
    set max-friend item (friend-id - 1) maxfriend
    set min-friend item (friend-id - 1) minfriend
  ]
  
end

to initialize-frequency
  ask people
  [
    let weekdayshopping [1 2 3 4]
    py:set "weekdayshopping" weekdayshopping
    py:set "weekdayshoppingprob" weekdayshoppingfre
    (py:run
      "import random"
      "result = random.choices (weekdayshopping, weekdayshoppingprob)"
    )
    set weekday-shopping item 0 py:runresult "result"
    (ifelse
      weekday-shopping = 1 [set weekday-shopping 0]
      weekday-shopping = 2 [set weekday-shopping 1 + random 5] 
      weekday-shopping = 3 [set weekday-shopping 6 + random 5] 
      [set weekday-shopping 11 + random 5] 
    )
  
    let weekendshopping [1 2 3 4]
    py:set "weekendshopping" weekdayshopping
    py:set "weekendshoppingprob" weekdayshoppingfre
    (py:run
      "import random"
      "result = random.choices (weekendshopping, weekendshoppingprob)"
    )
    set weekend-shopping item 0 py:runresult "result"
    (ifelse
      weekend-shopping = 1 [set weekend-shopping 0]
      weekend-shopping = 2 [set weekend-shopping 1 + random 2] 
      weekend-shopping = 3 [set weekend-shopping 3 + random 2] 
      [set weekend-shopping 5 + random 2]
    )
    
    let weekdayleisure [1 2 3 4]
    py:set "weekdayleisure" weekdayleisure
    py:set "weekdayleisureprob" weekdayleisurefre
    (py:run
      "import random"
      "result = random.choices (weekdayleisure, weekdayleisureprob)"
    )
    set weekday-leisure item 0 py:runresult "result"
    (ifelse
      weekday-leisure = 1 [set weekday-leisure 0]
      weekday-leisure = 2 [set weekday-leisure 1 + random 5] 
      weekday-leisure = 3 [set weekday-leisure 6 + random 5] 
      [set weekday-leisure 11 + random 5] 
    )
    
    let weekendleisure [1 2 3 4]
    py:set "weekendleisure" weekdayleisure
    py:set "weekendleisureprob" weekdayleisurefre
    (py:run
      "import random"
      "result = random.choices (weekendleisure, weekendleisureprob)"
    )
    set weekend-leisure item 0 py:runresult "result"
    (ifelse
      weekend-leisure = 1 [set weekend-leisure 0]
      weekend-leisure = 2 [set weekend-leisure 1 + random 2] 
      weekend-leisure = 3 [set weekend-leisure 3 + random 2] 
      [set weekend-leisure 5 + random 2]
    )
  ]
end

to initialize-education
  ;;0-preschoolers 1-kindergarten 2-primary school 3-middle school 4-polytechnic school 5-high school 6-college degree7- Bachelor degree 8-from college to bachelor 9-master degree 10-PHD
  ask people with [education-level = 1]
  [
    if (Age < 3) [set education 0] ;preschoolers
    if (Age >= 3 and age <= 5) [set education 1]  ;kindergarten
    if (age >= 6 and age <= 11) [set education 2] ;primary school
    if (age >= 12 and age <= 14) [set education 3] ;middle school
    if (age >= 15 and age <= 18) 
    [
      ifelse random-float 1 <= 0.7
      [set education 5] ;high school
      [set education 4] ;polytechnic school
    ]
    if age > 18 [set education random 5 + 1]
  ]
  
  ask people
  [
    if education-level = 2 [set education 6]  ;college degree
    if education-level = 3 [set education 7 + random 2] ;Bachelor degree or from college to bachelor
    if education-level = 4 [set education 9 + random 2] ;Master or PHD degree 
  ]

  ;preschoolers
  ask people with [education = 0 and status = 1]
  [
    set edu-year-required 3
    if (age = 0) [set edu-year 1]
    if (age = 1) [set edu-year 2]
    if (age = 2) [set edu-year 3]
  ]
  
  ;kindergarten
  ask people with [education = 1 and status = 1]
  [
    set edu-year-required 3
    if (age = 3) [set edu-year 1]
    if (age = 4) [set edu-year 2]
    if (age = 5) [set edu-year 3]
  ]
  
  ;primary school
  ask people with [education = 2 and status = 1]
  [
    set edu-year-required 6
    if (age = 6) [set edu-year 1]
    if (age = 7) [set edu-year 2]
    if (age = 8) [set edu-year 3]
    if (age = 9) [set edu-year 4]
    if (age = 10) [set edu-year 5]
    if (age = 11) [set edu-year 6]
  ] 
  
  ;middle school
  ask people with [education = 3 and status = 1]
  [
    set edu-year-required 3
    if (age = 12) [set edu-year 1]
    if (age = 13) [set edu-year 2]
    if (age = 14) [set edu-year 3]
  ]
  
  ;polytechnic school or high school
  ask people with [(education = 4 or education = 5) and status = 1]
  [
    set edu-year-required 3
    if (age = 15) [set edu-year 1]
    if (age = 16) [set edu-year 2]
    if (age = 17) [set edu-year 3]
  ]
  
  ;college
  ask people with [education = 6 and status = 1]
  [
    set edu-year-required 3
    if (age = 18) [set edu-year 1]
    if (age = 19) [set edu-year 2]
    if (age = 20) [set edu-year 3]
  ]
  
  ;bachelor degree
  ask people with [education = 7 and status = 1]
  [
    set edu-year-required 4
    if (age = 18) [set edu-year 1]
    if (age = 19) [set edu-year 2]
    if (age = 20) [set edu-year 3]
    if (age = 21) [set edu-year 4]
  ]
  
  ;from college to bachelor degree
  ask people with [education = 8 and status = 1]
  [
    set edu-year-required 2
    if (age = 21) [set edu-year 1]
    if (age = 22) [set edu-year 2]
  ]
  
  ;master degree
  ask people with [education = 9 and status = 1]
  [
    set edu-year-required 3
    if (age <= 22) [set edu-year 1]
    if (age = 23) [let p random 1 ifelse (p = 0) [set edu-year 1] [set edu-year 2]]
    if (age >= 24) [let p random 3 set edu-year (p + 1)]
  ]
  
  ;PHD
  ask people with [education = 10 and status = 1]
  [
    set edu-year-required 4
    if (age <= 25)[set edu-year 1]
    if (age = 26) [let p random 1 ifelse (p = 0) [set edu-year 1] [set edu-year 2]]
    if (age = 27) [let p random 3 set edu-year (p + 1)]
    if (Age = 28) [let p random 4 set edu-year (p + 1)]
  ]
end


to find-hhder
    ;this function is used to find a person to represent the household. People over 18 years old will be selected preferentially
    let i 1
    let num-hhd max [hhd] of people
    while [i <= num-hhd]
    [
      if count people with [hhd = i] > 0
      [
        ifelse (count people with [hhd = i and age >= 18] > 0)
        [ask one-of people with [hhd = i and age >= 18] [set relationship 1]]
        [ask one-of people with [hhd = i] [set relationship 1]]
      ]
      set i i + 1
    ]
end

to initialize-relationship
   ;Determine the relationship between each family member and the householder
  let i min [who] of people
  let num-person max [who] of people
  let num-hhd max [hhd] of people
  while [i < num-person]
  [
    ask person i [
      if (relationship = 0)
      [
        let hhd1 hhd
        let hhder1 one-of people with [relationship = 1 and hhd = hhd1]
        let age1 [age] of hhder1 ;record age of householer
        let gender1 [gender] of hhder1 ;record gender of householer
      
        ;spouse of householder
        if (gender1 = 0 and age1 >= 20) or (gender1 = 1 and age1 >= 22) 
        [
          if relationship = 0 and age - age1 <= 20 and age1 - age <= 20 and gender != gender1 and count people with [hhd = hhd1 and relationship = 2] = 0 and ((gender = 1 and age >= 22) or (gender = 0 and age >= 20))
          [set relationship 2]
        ]
      
        ;Son, daughter, Son-in-law, and daughter-in-law
        if (relationship = 0 and age1 - age <= 44 and age1 - age >= 21)
        [
          if (gender = 1 and age < 22) [set relationship 3];son
          if (gender = 0 and age < 20) [set relationship 3];daughter 
        
          if (gender = 1 and age >= 22)
          [
            ifelse (count people with [relationship = 3 and hhd = hhd1 and gender = 0 and age >= 20] > count people with [relationship = 13 and hhd = hhd1 and gender = 1])
            [set relationship 13] ;daughter-in-law
            [set relationship 3] ;daughter
          ]
        
          if (gender = 0 and age >= 20)
          [
            ifelse (count people with [relationship = 3 and hhd = hhd1 and gender = 1 and age >= 22] < count people with [gender = 0 and relationship = 13 and hhd = hhd1])
            [set relationship 13];son-in-law
            [set relationship 3] ;son
          ]    
        ]
      
        ;Grandchildren and grandchildren
        if (relationship = 0 and age1 - age >= 45) [set relationship 6]
      
        ;parents
        if (relationship = 0 and age - age1 >= 21 and age - age1 <= 44 and count people with [gender = [gender] of myself and relationship = 4 and hhd = hhd1] = 0)
        [set relationship 4]
      
        ;Spouse's parents
        if (relationship = 0 and age - age1 >= 21 and age - age1 <= 44 and count people with [gender = [gender] of myself and relationship = 4 and hhd = hhd1] = 1 and count people with [gender = [gender] of myself and relationship = 5 and hhd = hhd1] = 0 and count people with [hhd = hhd1 and relationship = 2] = 1)
        [set relationship 5]
      
        ;grandparents
        if (relationship = 0 and age - age1 >= 45 and count people with [gender = [gender] of myself and relationship = 7 and hhd = hhd1] = 0)
        [set relationship 7]
        if (relationship = 0 and age - age1 >= 45 and count people with [gender = [gender] of myself and relationship = 7 and hhd = hhd1] = 1 and count people with [gender = [gender] of myself and relationship = 8 and hhd = hhd1] = 0)
        [set relationship 8]
      
        ;spouse's grandparents
        if (relationship = 0 and age - age1 >= 45 and count people with [gender = [gender] of myself and relationship = 7 and hhd = hhd1] = 1 and count people with [gender = [gender] of myself and relationship = 8 and hhd = hhd1] = 1 and count people with [gender = [gender] of myself and relationship = 9 and hhd = hhd1] = 0 and count people with [hhd = hhd1 and relationship = 2] = 1)
        [set relationship 9]
        if (relationship = 0 and age - age1 >= 45 and count people with [gender = [gender] of myself and relationship = 7 and hhd = hhd1] = 1 and count people with [gender = [gender] of myself and relationship = 8 and hhd = hhd1] = 1 and count people with [gender = [gender] of myself and relationship = 9 and hhd = hhd1] = 1 and count people with [hhd = hhd1 and relationship = 2] = 1 and count people with [gender = [gender] of myself and hhd = hhd1 and relationship = 10] = 0)
        [set relationship 10]
      
        ;sibling
        if (relationship = 0)
       [
         if (abs (age - age1) <= 20)
          [set relationship  11]
       ]
      
        ;other relationship
        if (relationship = 0) [set relationship 12]
      ]
    
      
    ]
  set i i + 1
  ]
  
  ;create links (couple, parent, grandparent)
  let j min [who] of people
  set num-person max [who] of people
  while [j < num-person]
  [
    ask person j 
    [
      if (relationship = 1) ;linking householder with other family members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and relationship = 2 and hhd = [hhd] of myself]
        if hw != nobody [create-couple-with hw]
        
        ;parent link
        let fm other people with [not link-neighbor? myself and relationship = 4 and hhd = [hhd] of myself]
        if (fm != nobody) [create-parents-with fm]
        
        ;parent link
        let sd other people with [not link-neighbor? myself and relationship = 3 and hhd = [hhd] of myself]
        if (sd != nobody) [create-parents-with sd]
        
        ;grandparent link
        let gsd other people with [not link-neighbor? myself and relationship = 6 and hhd = [hhd] of myself]
        if (gsd != nobody) [create-grapas-with gsd]
        
        ;grandparent link
        let gp other people with [not link-neighbor? myself and (relationship = 7 or relationship = 8) and hhd = [hhd] of myself]
        if (gp != nobody) [create-grapas-with gp]
      ]
        
      if (relationship = 2) ;linking spouse with other family members
      [
        ;parent link
        let children other people with [not link-neighbor? myself and relationship = 3 and hhd = [hhd] of myself]
        if (children != nobody) [create-parents-with children]
        
        ;parent link
        let fm other people with [not link-neighbor? myself and relationship = 5 and hhd = [hhd] of myself]
        if (fm != nobody) [create-parents-with fm]
        
        ;grandparent link
        let gp other people with [not link-neighbor? myself and (relationship = 9 or relationship = 10) and hhd = [hhd] of myself]
        if (gp != nobody) [create-grapas-with gp]
        
        ;grandparent link
        let sd other people with [not link-neighbor? myself and relationship = 3 and hhd = [hhd] of myself]
        if (sd != nobody) [create-parents-with sd]
      ]
      
      if (relationship = 3 and ((gender = 1 and age >= 22) or (gender = 0 and age >= 20))) ;户主的儿女
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 13 and gender != [gender] of myself]
        if hw != nobody [create-couple-with hw]
      ]
      
      if (relationship = 4) ;link householder's parent with other members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 5]
        if hw != nobody [create-couple-with hw]
        
        ;parent link
        let children other people with [not link-neighbor? myself and hhd = [hhd] of myself and (relationship = 1 or relationship = 11)]
        if (Children != nobody) [create-parents-with children]
        
        ;parent link
        ifelse (gender = 1) 
        [
          let fm other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 7]
          if (fm != nobody) [create-parents-with fm]
        ]
        [
          let fm other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 8]
          if (fm != nobody) [create-parents-with fm]
        ]
        
        ;grandparent link
        let gsd other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 3]
        if (gsd != nobody) [create-grapas-with gsd]
      ]
      
      if (relationship = 5) ;linking spouse's parents with other members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 5]
        if hw != nobody [create-couple-with hw]
        
        ;parent link
        ifelse (gender = 1)
        [
          let fm other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 9]
          if (fm != nobody) [create-parents-with fm]
        ]
        [
          let fm other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 108]
          if (fm != nobody) [create-parents-with fm]
        ]
        
        ;grandparent link
        let gsd other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 3]
        if (gsd != nobody) [create-grapas-with gsd]
      ]
    
      if (relationship = 6) ;linking grandsons with other members
      [
        ;couple link
        let fm1 one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and ((gender = 1 and age >= 22) or (gender = 0 and age >= 20)) and relationship = 3]
        if (fm1 != nobody)
        [
          create-parent-with fm1
          let fm2 one-of other people with [couple-neighbor? fm1]
          if (fm2 != nobody) [create-parent-with fm2]
        ]
      ]
      
      if (relationship = 7) ;linking grandparents with other members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 7]
        if hw != nobody [create-couple-with hw]
      ]
      
      if (relationship = 8) ;linking grandparents with other members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 8]
        if hw != nobody [create-couple-with hw]
      ]
      
      if (relationship = 9) ;linking grandparents of spouse with other members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 9]
        if hw != nobody [create-couple-with hw]
      ]
      
      if (relationship = 10) ;linking grandparents of spouse with other members
      [
        ;couple link
        let hw one-of other people with [not link-neighbor? myself and hhd = [hhd] of myself and relationship = 10]
        if hw != nobody [create-couple-with hw]
      ]
      
      if (Relationship = 11) ;linking sibling with other members
      [
        ;grandparents link
        let gp other people with [not link-neighbor? myself and hhd = [hhd] of myself and (relationship = 7 or relationship = 8)]
        if gp != nobody [create-grapas-with gp]
      ]
    ]
    set j j + 1
  ]
  
  ask links [hide-link]
end



to initialize-residence
  ;this function is used to allocate a residential location for households, for each household, there are three steps to allocate a residential building to it
  ;Step 1: check if there any residence the household can purchase it, according to parameter Tpurchase. If yes, the household will purchase the residence, otherwise, it will go to step 2
  ;Step 2: check if there any residence can rent it, according to parameter Tpurchase. If yes, the household will rent the residence, otherwise, it will go to step 3
  ;step 3: rent the cheapeast residence
  set Trent 0.3 ;the parameter determines residences that affordable to rent. Specifically, if the rent of a residence <= average income of a household * Trent, the residence is affordable to rent for the household
  set Tpurchase 0.05 ;the parameter determines residences that affordable to purchase. Specifically, if the selling price of a residence <= average income of a household * Tpurchase, the residence is affordable to purchase for the household
  
  while [count people with [relationship = 1 and livelong = 0 and livelat = 0] > 0]
  [
    ask max-one-of people with [relationship = 1 and livelong = 0 and livelat = 0] [number] ;Priority should be given to housing allocation for families with a larger population, which can to some extent avoid the inability of the last few families to find suitable housing (as the capacity of the housing is smaller than their family size)
    [
      let afford1 one-of residences with [capacity > [number] of myself and (purchasing * [number] of myself) * Tpurchase <= [hhd-income] of myself] ;record those residences which are affordable to purchase
      ifelse afford1 != nobody 
      [
        create-purchase-with afford1
        set livelong [long] of afford1
        set livelat [lat] of afford1
        move-to afford1
        ask people with [hhd = [hhd] of myself] [set livelong [long] of afford1 set livelat [lat] of afford1 move-to afford1 set residence-cost [purchasing] of afford1 set residence-size number]
        ask afford1 [set capacity capacity - [number] of myself]
      ]
      
      ;If no suitable house is found to purchase during the above process, the household will consider renting a residence
      [
        
        let afford2 one-of residences with [capacity > [number] of myself and (purchasing * [number] of myself) * Trent <= [hhd-income] of myself];record those residences which are affordable to rent
        ifelse afford2 != nobody
        [
          create-rent-with afford2
          set livelong [long] of afford2
          set livelat [lat] of afford2
          move-to afford2
          ask people with [hhd = [hhd] of myself] [set livelong [long] of afford2 set livelat [lat] of afford2 move-to afford2  set residence-cost [Rrent] of afford2 set residence-size number]
          ask afford2 [set capacity capacity - [number] of myself]
        ]
        
        ;If no suitable house is found during the above process, the household will rent the cheapest house on the market.
        [
          let afford3 min-one-of residences with [capacity > [number] of myself] [Rrent]
          create-rent-with afford3
          set livelong [long] of afford3
          set livelat [lat] of afford3
          move-to afford3
          ask people with [hhd = [hhd] of myself] [set livelong [long] of afford3 set livelat [lat] of afford3 move-to afford3  set residence-cost [purchasing] of afford3 set residence-size number]
          ask afford3 [set capacity capacity - [number] of myself]
        ]
      ]
    ]
  ]
end

to initialize-work-study-location
  ;this fuction is used to assign work or study place
  
  ;study place
  ;(1)Considering the concept of school districts, kindergarten, elementary, and junior high school students will be given priority allocation to schools within 2km of home, and these schools have size restrictions (i.e. the number of admissions will not exceed their capacity)
  ;(2)high school, college, and university: the probability of each student attending the school is based on school's capacity
  
  
  ;Calculate the probability of each student attending the school based on school's capacity (only for high school, college, and university)
  let school4 [] ;list of school with category = 4
  let prob4 [];weights
  ask schools with [category = 4][set school4 lput who school4 set prob4 lput capacity prob4]
  py:set "school4" school4
  py:set "prob4" prob4
  let school5 [] ;list of school with category = 5
  let prob5 [];weights
  ask schools with [category = 5][set school5 lput who school5 set prob5 lput capacity prob5]
  py:set "school5" school5
  py:set "prob5" prob5
  let school6 [] ;list of school with category = 4
  let prob6 [];weights
  ask schools with [category = 6][set school6 lput who school6 set prob6 lput capacity prob6]
  py:set "school6" school6
  py:set "prob6" prob6
  let school7 [] ;list of school with category = 7
  let prob7 [];weights
  ask schools with [category = 7][set school7 lput who school7 set prob7 lput capacity prob7]
  py:set "school7" school7
  py:set "prob7" prob7
  
  
  ask people with [status = 1 and education >= 1 and wslong = 0 and wslat = 0]
  [
    (ifelse
      education = 1 ;find a kindergarten to study
      [
        ifelse (count schools with [category = 1 and count in-student-neighbors < capacity] in-radius 5 > 0)
        [
          let candidate one-of schools with [category = 1 and count in-student-neighbors < capacity] in-radius 5 ;Randomly select a kindergarten within a 2km range
          create-student-with candidate
          set wslong [long] of candidate
          set wslat [lat] of candidate
        ] 
        [
          let candidate min-one-of (schools with [category = 1 and count in-student-neighbors < capacity])[distance myself];Choose the nearest kindergarten
          create-student-with candidate
          set wslong [long] of candidate
          set wslat [lat] of candidate
        ]
      ]
      
      education = 2
      [
        ifelse (count schools with [category = 2 and count in-student-neighbors < capacity] in-radius 5 > 0)
        [
          let candidate one-of schools with [category = 2 and count in-student-neighbors < capacity] in-radius 5 ;;Randomly select a primary school within a 2km range
          create-student-with candidate
          set wslong [long] of candidate
          set wslat [lat] of candidate
        ] 
        [
          let candidate min-one-of (schools with [category = 2 and count in-student-neighbors < capacity])[distance myself];Choose the nearest primary school
          create-student-with candidate
          set wslong [long] of candidate
          set wslat [lat] of candidate
        ]
      ]
      
      education = 3
      [
        ifelse (count schools with [category = 3 and count in-student-neighbors < capacity] in-radius 5 > 0)
        [
          let candidate one-of schools with [category = 3] in-radius 5 ;Randomly select a middle school within a 2km range
          create-student-with candidate
          set wslong [long] of candidate
          set wslat [lat] of candidate
        ] 
        [
          let candidate min-one-of (schools with [category = 3 and count in-student-neighbors < capacity])[distance myself];Choose the nearest middle school
          create-student-with candidate
          set wslong [long] of candidate
          set wslat [lat] of candidate
        ]
      ]
      
      education = 4 ;select one college
      [
        (py:run
            "result = random.choices (school5, prob5)"
          )
        let candidate turtle item 0 py:runresult "result"
        create-student-with candidate
        set wslong [long] of candidate
        set wslat [lat] of candidate
      ]
      
      education = 5 ;select one high school
      [
        (py:run
            "result = random.choices (school4, prob4)"
          )
        let candidate turtle item 0 py:runresult "result"
        create-student-with candidate
        set wslong [long] of candidate
        set wslat [lat] of candidate
      ]
      
      
      education = 6 ;select one college
      [
        (py:run
            "result = random.choices (school5, prob5)"
          )
        let candidate turtle item 0 py:runresult "result"
        
        create-student-with candidate
        set wslong [long] of candidate
        set wslat [lat] of candidate
      ]
      
      ;education = 7, 8, 9, 10, select one university
      [        
        (py:run
            "result = random.choices (school6, prob6)"
          )
        let candidate turtle item 0 py:runresult "result"
        create-student-with candidate
        set wslong [long] of candidate
        set wslat [lat] of candidate
      ])
    ]
  
  
  ;assign work place
  ;The number of employees that can be assigned to each firm=(total labor force - unemployed - people working in schools - people working in stores) * the capacity of the firm/the sum of the capacities of all firms
  let staff-firm count people with [status = 2] - sum [staff] of schools - sum [staff] of shops
  ask firms[set staff round (staff-firm * capacity / sum [capacity] of firms)] ;calculate how many staff the firm will have
  
  ;Ensure the number of staffs in firms equals to "staff-firm"
  if sum [staff] of firms > staff-firm [ask n-of (sum [staff] of firms - staff-firm) firms with [staff > 1] [set staff staff - 1]]
  if sum [staff] of firms < staff-firm [ask n-of (staff-firm - sum [staff] of firms) firms [set staff staff + 1]]
 
  
  ;randomly assign work place to labors (distance-max will be used as a constrain)
  ask people with [status = 2 and count in-employee-neighbors = 0]
  [
    let candidate one-of schools with [count in-employee-neighbors < staff] in-radius distance-max
    if candidate = nobody [set candidate one-of shops with [count in-employee-neighbors < staff] in-radius distance-max]
    if candidate = nobody [set candidate one-of firms with [count in-employee-neighbors < staff] in-radius distance-max]
    if candidate = nobody [set candidate one-of schools with [count in-employee-neighbors < staff]]
    if candidate = nobody [set candidate one-of shops with [count in-employee-neighbors < staff]]
    if candidate = nobody [set candidate one-of firms with [count in-employee-neighbors < staff]]
    create-employee-with candidate
    set wslong [long] of candidate
    set wslat [lat] of candidate
  ]
  
  ;calculate firm's accessibility and agglomeration
  ask firms
  [
    if count in-employee-neighbors = 0 [die]
    ;update agglomeration
    set agg sum [count in-employee-neighbors] of other firms in-radius 2.5
    if agg = 0 [set agg 1] ;To avoid dividing by zero in the subsequent calculation of firm's capacity
    
    ;calculate accesssibility of fimrs
    ask in-employee-neighbors [set current-ws-dis distance myself]
    set acc sum [current-ws-dis] of in-employee-neighbors / count in-employee-neighbors
  ]
end